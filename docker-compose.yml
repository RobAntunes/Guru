services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:2025.06.0
    container_name: guru-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    environment:
      - NEO4J_AUTH=neo4j/gurupassword
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./docker/neo4j/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p gurupassword 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    container_name: guru-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass gurupassword
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Main Guru Application
  guru-app:
    build: 
      context: .
      dockerfile: Dockerfile.minimal
    container_name: guru-app
    restart: unless-stopped
    ports:
      - "3002:3000"   # API Server
      - "3003:3001"   # WebSocket for real-time updates
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=gurupassword
      - REDIS_URL=redis://default:gurupassword@redis:6379
      - DUCKDB_PATH=/data/guru_analytics.db
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - guru_data:/data
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DuckDB Analytics (runs as sidecar for analytics queries)
  duckdb-server:
    build:
      context: ./docker/duckdb
      dockerfile: Dockerfile
    container_name: guru-duckdb
    restart: unless-stopped
    ports:
      - "8080:8080"   # HTTP API for analytics
    volumes:
      - guru_data:/data
    environment:
      - DUCKDB_PATH=/data/guru_analytics.db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring Stack (Optional for production)
  prometheus:
    image: prom/prometheus:v2.58.0
    container_name: guru-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:11.4.0
    container_name: guru-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gurupassword
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  guru_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: guru-network
    driver: bridge