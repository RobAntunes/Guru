# Docker Compose for Development/Testing Only
# Production runs everything embedded - no Docker needed!

services:
  # DuckDB Server for Testing (when native module fails in test environment)
  # In production, DuckDB runs embedded - no external server needed
  duckdb-test-server:
    build:
      context: ./docker/duckdb
      dockerfile: Dockerfile
    container_name: guru-duckdb-test
    restart: unless-stopped
    ports:
      - "8080:8080"   # HTTP API for test environment
    volumes:
      - duckdb_test_data:/data
    environment:
      - DUCKDB_PATH=/data/test_analytics.db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    profiles:
      - test  # Only runs when explicitly requested with --profile test


  # Monitoring Stack (Optional for production)
  prometheus:
    image: prom/prometheus:v2.58.0
    container_name: guru-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:11.4.0
    container_name: guru-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gurupassword
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  duckdb_test_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: guru-network
    driver: bridge