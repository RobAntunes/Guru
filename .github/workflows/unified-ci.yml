name: 🚀 Guru Unified CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  DOCKER_BUILDKIT: 1

jobs:
  # Core Tests - Run first as they're most critical
  core-tests:
    name: 🧪 Core Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🏗️ Type check
      run: npm run type-check
      
    - name: 🧪 Run core tests
      run: npm test
      
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        flags: core
        
  # QPFM Tests - Quantum Memory System
  qpfm-tests:
    name: 🌌 QPFM Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🧪 Test DPCM Pattern Store
      run: npm test tests/memory/dpcm-pattern-store.test.ts
      
    - name: 🌌 Test Quantum Memory System
      run: npm test tests/memory/quantum-memory-system.test.ts
      
    - name: 🔗 Test QPFM Integration
      run: npm test tests/integration/qpfm-integration.test.ts
      
    - name: 📊 Upload QPFM coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        flags: qpfm

  # Harmonic Intelligence Tests
  harmonic-tests:
    name: 🎵 Harmonic Intelligence Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎵 Run harmonic tests
      run: npm test tests/harmonic-intelligence/
      
    - name: 🔍 Self-analysis
      run: npx tsx src/harmonic-intelligence/core/harmonic-cli.ts analyze src/harmonic-intelligence --patterns fractal,wave,harmonic
      
    - name: 📊 Upload harmonic coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        flags: harmonic

  # Docker & Infrastructure Tests
  docker-tests:
    name: 🐳 Docker Infrastructure Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker images
      run: docker-compose build --parallel
      
    - name: 🚀 Start services
      run: |
        docker-compose up -d
        sleep 10  # Wait for services to start
        
    - name: 🏥 Health check Neo4j
      run: |
        curl -f http://localhost:7474 || exit 1
        
    - name: 🏥 Health check Redis
      run: |
        docker-compose exec -T redis redis-cli ping | grep PONG || exit 1
        
    - name: 🏥 Health check application
      run: |
        curl -f http://localhost:3456/health || exit 1
        
    - name: 🛑 Stop services
      if: always()
      run: docker-compose down -v

  # MCP Tools Tests
  mcp-tests:
    name: 🤖 MCP Tools Tests
    runs-on: ubuntu-latest
    needs: [qpfm-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build MCP server
      run: npm run mcp:build
      
    - name: 🤖 Test MCP tools functionality
      run: |
        # Create test script to verify MCP tools
        cat > test-mcp.ts << 'EOF'
        import { QuantumProbabilityFieldMemory } from './src/memory/quantum-memory-system.js';
        import { registerQPFMTools } from './src/mcp/qpfm-mcp-tools.js';
        
        const qpfm = new QuantumProbabilityFieldMemory();
        const tools = registerQPFMTools(qpfm);
        
        // Test each tool exists
        const requiredTools = ['qpfm_query', 'qpfm_store', 'qpfm_distribution', 'qpfm_emergent', 'qpfm_compose'];
        for (const tool of requiredTools) {
          if (!tools[tool]) {
            console.error(`Missing tool: ${tool}`);
            process.exit(1);
          }
        }
        
        console.log('✅ All MCP tools registered successfully');
        EOF
        
        npx tsx test-mcp.ts
        rm test-mcp.ts

  # Performance & Quality Gates
  quality-gates:
    name: 📊 Quality Gates
    runs-on: ubuntu-latest
    needs: [core-tests, qpfm-tests, harmonic-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint code
      run: npm run lint || true  # Don't fail on lint for now
      
    - name: 📏 Check code complexity
      run: |
        npx plato -r -d reports/complexity src || true
        echo "Code complexity report generated"
        
    - name: 🚀 Performance benchmark
      run: |
        # Test QPFM performance
        cat > benchmark-qpfm.ts << 'EOF'
        import { QuantumProbabilityFieldMemory } from './src/memory/quantum-memory-system.js';
        import { HarmonicPatternMemory, PatternCategory } from './src/memory/types.js';
        
        const qpfm = new QuantumProbabilityFieldMemory();
        const patterns: HarmonicPatternMemory[] = [];
        
        // Create 1000 test patterns
        for (let i = 0; i < 1000; i++) {
          patterns.push({
            id: `pattern-${i}`,
            timestamp: new Date(),
            content: {
              title: `Pattern ${i}`,
              description: `Test pattern ${i}`,
              type: 'pattern',
              tags: ['test'],
              data: {}
            },
            harmonicProperties: {
              category: Object.values(PatternCategory)[i % Object.values(PatternCategory).length],
              strength: Math.random(),
              complexity: Math.random(),
              confidence: Math.random(),
              occurrences: Math.floor(Math.random() * 100)
            },
            coordinates: undefined as any,
            relevanceScore: Math.random(),
            locations: [],
            evidence: [],
            relatedPatterns: [],
            causesPatterns: [],
            requiredBy: []
          });
        }
        
        console.time('Bulk store 1000 patterns');
        await qpfm.bulkStore(patterns);
        console.timeEnd('Bulk store 1000 patterns');
        
        console.time('Query performance');
        const result = await qpfm.query({
          type: 'discovery',
          confidence: 0.5,
          exploration: 0.7
        });
        console.timeEnd('Query performance');
        
        console.log(`Found ${result.memories.length} patterns`);
        console.log('✅ Performance benchmark completed');
        EOF
        
        npx tsx benchmark-qpfm.ts
        rm benchmark-qpfm.ts

  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🛡️ Run npm audit
      run: npm audit --production || true
      
    - name: 🔍 Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # Build & Package
  build:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [quality-gates, docker-tests, mcp-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build project
      run: npm run build
      
    - name: 📦 Package artifacts
      run: |
        mkdir -p artifacts
        cp -r dist artifacts/
        cp -r docs artifacts/
        cp package.json artifacts/
        cp README.md artifacts/
        cp mcp.json artifacts/
        
    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: guru-build-${{ github.sha }}
        path: artifacts/
        retention-days: 7

  # Success notification
  notify-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [build, security]
    if: success()
    
    steps:
    - name: 🎉 Success message
      run: |
        echo "🎉 All CI checks passed!"
        echo "📊 Test suites: ✅"
        echo "🌌 QPFM system: ✅"
        echo "🎵 Harmonic Intelligence: ✅"
        echo "🐳 Docker infrastructure: ✅"
        echo "🤖 MCP tools: ✅"
        echo "🔒 Security: ✅"
        echo "📦 Build: ✅"